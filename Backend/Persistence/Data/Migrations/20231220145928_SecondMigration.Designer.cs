// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Persistence.Data;

#nullable disable

namespace Persistence.Data.Migrations
{
    [DbContext(typeof(NikeContext))]
    [Migration("20231220145928_SecondMigration")]
    partial class SecondMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Domain.Entities.Address", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Bis")
                        .HasMaxLength(10)
                        .HasColumnType("char(10)")
                        .HasColumnName("bis")
                        .IsFixedLength();

                    b.Property<string>("CardinalPrimario")
                        .HasMaxLength(10)
                        .HasColumnType("char(10)")
                        .HasColumnName("cardinal_primario")
                        .IsFixedLength();

                    b.Property<string>("CardinalSecundario")
                        .HasMaxLength(10)
                        .HasColumnType("char(10)")
                        .HasColumnName("cardinal_secundario")
                        .IsFixedLength();

                    b.Property<string>("Complemento")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("complemento");

                    b.Property<int>("IdCityFk")
                        .HasColumnType("int");

                    b.Property<string>("LetraPrincipal")
                        .HasMaxLength(2)
                        .HasColumnType("char(2)")
                        .HasColumnName("letra_principal")
                        .IsFixedLength();

                    b.Property<string>("LetraSecundaria")
                        .HasMaxLength(2)
                        .HasColumnType("char(2)")
                        .HasColumnName("letra_secundaria")
                        .IsFixedLength();

                    b.Property<short>("NumeroPrincipal")
                        .HasColumnType("smallint")
                        .HasColumnName("numero_principal");

                    b.Property<short>("NumeroSecundario")
                        .HasColumnType("smallint")
                        .HasColumnName("numero_secundario");

                    b.Property<string>("TipoVia")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("tipo_via");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "IdCityFk" }, "IdCityFk");

                    b.ToTable("address", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("IdStateFk")
                        .HasColumnType("int");

                    b.Property<string>("NameCity")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "IdStateFk" }, "IdStateFk");

                    b.ToTable("city", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Client", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("IdAddressFk")
                        .HasColumnType("int");

                    b.Property<string>("IdClient")
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Telephone")
                        .HasMaxLength(40)
                        .HasColumnType("varchar(40)");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "IdAddressFk" }, "IdAddressFk");

                    b.ToTable("client", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Country", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("NameCountry")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.ToTable("country", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Gamaprodruct", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("NameGama")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.ToTable("gamaprodruct", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("IdClientFk")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "IdClientFk" }, "IdClientFk");

                    b.ToTable("order", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("IdGamaProductFk")
                        .HasColumnType("int");

                    b.Property<string>("NameProduct")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<int>("Price")
                        .HasColumnType("int");

                    b.Property<int>("StateStock")
                        .HasColumnType("int");

                    b.Property<int>("StockMax")
                        .HasColumnType("int");

                    b.Property<int>("StockMin")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "IdGamaProductFk" }, "IdGamaProductFk");

                    b.ToTable("product", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.State", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("IdCountryFk")
                        .HasColumnType("int");

                    b.Property<string>("NameState")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "IdCountryFk" }, "IdCountryFk");

                    b.ToTable("state", (string)null);
                });

            modelBuilder.Entity("OrderProduct", b =>
                {
                    b.Property<int>("IdOrderFk")
                        .HasColumnType("int");

                    b.Property<int>("IdProductFk")
                        .HasColumnType("int");

                    b.HasKey("IdOrderFk", "IdProductFk")
                        .HasName("PRIMARY")
                        .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

                    b.HasIndex(new[] { "IdProductFk" }, "IdProductFk");

                    b.ToTable("order_product", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Address", b =>
                {
                    b.HasOne("Domain.Entities.City", "IdCityFkNavigation")
                        .WithMany("Addresses")
                        .HasForeignKey("IdCityFk")
                        .IsRequired()
                        .HasConstraintName("address_ibfk_1");

                    b.Navigation("IdCityFkNavigation");
                });

            modelBuilder.Entity("Domain.Entities.City", b =>
                {
                    b.HasOne("Domain.Entities.State", "IdStateFkNavigation")
                        .WithMany("Cities")
                        .HasForeignKey("IdStateFk")
                        .IsRequired()
                        .HasConstraintName("city_ibfk_1");

                    b.Navigation("IdStateFkNavigation");
                });

            modelBuilder.Entity("Domain.Entities.Client", b =>
                {
                    b.HasOne("Domain.Entities.Address", "IdAddressFkNavigation")
                        .WithMany("Clients")
                        .HasForeignKey("IdAddressFk")
                        .IsRequired()
                        .HasConstraintName("client_ibfk_1");

                    b.Navigation("IdAddressFkNavigation");
                });

            modelBuilder.Entity("Domain.Entities.Order", b =>
                {
                    b.HasOne("Domain.Entities.Client", "IdClientFkNavigation")
                        .WithMany("Orders")
                        .HasForeignKey("IdClientFk")
                        .IsRequired()
                        .HasConstraintName("order_ibfk_1");

                    b.Navigation("IdClientFkNavigation");
                });

            modelBuilder.Entity("Domain.Entities.Product", b =>
                {
                    b.HasOne("Domain.Entities.Gamaprodruct", "IdGamaProductFkNavigation")
                        .WithMany("Products")
                        .HasForeignKey("IdGamaProductFk")
                        .IsRequired()
                        .HasConstraintName("product_ibfk_1");

                    b.Navigation("IdGamaProductFkNavigation");
                });

            modelBuilder.Entity("Domain.Entities.State", b =>
                {
                    b.HasOne("Domain.Entities.Country", "IdCountryFkNavigation")
                        .WithMany("States")
                        .HasForeignKey("IdCountryFk")
                        .IsRequired()
                        .HasConstraintName("state_ibfk_1");

                    b.Navigation("IdCountryFkNavigation");
                });

            modelBuilder.Entity("OrderProduct", b =>
                {
                    b.HasOne("Domain.Entities.Order", null)
                        .WithMany()
                        .HasForeignKey("IdOrderFk")
                        .IsRequired()
                        .HasConstraintName("order_product_ibfk_2");

                    b.HasOne("Domain.Entities.Product", null)
                        .WithMany()
                        .HasForeignKey("IdProductFk")
                        .IsRequired()
                        .HasConstraintName("order_product_ibfk_1");
                });

            modelBuilder.Entity("Domain.Entities.Address", b =>
                {
                    b.Navigation("Clients");
                });

            modelBuilder.Entity("Domain.Entities.City", b =>
                {
                    b.Navigation("Addresses");
                });

            modelBuilder.Entity("Domain.Entities.Client", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("Domain.Entities.Country", b =>
                {
                    b.Navigation("States");
                });

            modelBuilder.Entity("Domain.Entities.Gamaprodruct", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("Domain.Entities.State", b =>
                {
                    b.Navigation("Cities");
                });
#pragma warning restore 612, 618
        }
    }
}
